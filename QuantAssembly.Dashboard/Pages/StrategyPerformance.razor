@page "/strategyperformance"
@inject LedgerService LedgerService
@inject AnalyticsService AnalyticsService
@using Orientation = Microsoft.FluentUI.AspNetCore.Components.Orientation
@using Position = QuantAssembly.Common.Models.Position

<PageTitle>Strategy Performance</PageTitle>

<FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left"
    VerticalAlignment="VerticalAlignment.Center" VerticalGap="20">
    <FluentHeader>Strategy Performance Summary</FluentHeader>
    <FluentDataGrid Items="@strategiesMetrics" ResizableColumns="true" ShowHover="true" AutoFit="true">
        <PropertyColumn Property="@(s => s.StrategyName)" Title="Strategy Name" Sortable="true"
            HeaderToolTip="The name of the trading strategy" />
        <PropertyColumn Property="@(s => s.TotalProfitOrLoss)" Title="Total Profit/Loss" Sortable="true"
            HeaderToolTip="The total profit or loss for the strategy" />
        <PropertyColumn Property="@(s => s.WinRate)" Title="Win Rate (%)" Sortable="true"
            HeaderToolTip="The percentage of profitable trades" />
        <PropertyColumn Property="@(s => s.AverageProfitPerTrade)" Title="Average Profit per Trade" Sortable="true"
            HeaderToolTip="The average profit or loss per trade" />
        <PropertyColumn Property="@(s => string.Format("{0:%d}d, {0:hh}hrs, {0:mm}min", s.AverageHoldingPeriod))"
            Title="Average Holding Period" Sortable="true" HeaderToolTip="The average time a position is held" />
        <PropertyColumn Property="@(s => s.SharpeRatio)" Title="Sharpe Ratio" Sortable="true"
            HeaderToolTip="A measure of the risk-adjusted return" />
        <PropertyColumn Property="@(s => s.AverageNumberOfPositionsOpened)" Title="Avg Positions Opened (per week)"
            Sortable="true" HeaderToolTip="The average number of positions opened per week" />
        <PropertyColumn Property="@(s => s.AverageNumberOfPositionsClosed)" Title="Avg Positions Closed (per week)"
            Sortable="true" HeaderToolTip="The average number of positions closed per week" />
        <PropertyColumn Property="@(s => s.MaxDrawDown)" Title="Max Drawdown" Sortable="true"
            HeaderToolTip="The maximum observed loss from a peak to a trough" />
    </FluentDataGrid>
    <FluentDivider Orientation="Orientation.Horizontal" Style="width: 100%;" Role="DividerRole.Separator" />
    <!-- #region  Line chart-->
    <div class="container-fluid overflow-x-auto">
        <LineChart @ref="lineChart"/>
    </div>
</FluentStack>

@code {
    private IQueryable<StrategyMetrics> strategiesMetrics;

    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private List<string> chartLabels = new List<string>();
    private readonly int borderWidth = 2;
    private readonly int hoverBorderWidth = 3;

    protected override void OnInitialized()
    {
        var positions = LedgerService.GetAllPositions().ToList();
        strategiesMetrics = AnalyticsService.GetStrategyMetrics(positions);
        var peData = AnalyticsService.GetCumulativeProfitLossDataByStrategy(positions);
        PrepareChartSeriesAndLabels(peData);
        StateHasChanged();
    }

    private void PrepareChartSeriesAndLabels(List<AnalyticsService.StrategyCumulativeProfitLossData> peData)
    {
        var colors = ColorUtility.CategoricalTwelveColors;
        int colorIndex = 0;
        chartLabels = peData.First().NumberOfTransactions.Select(l => l.ToString()).ToList();
        var dataSets = new List<IChartDataset>();
        foreach (var strategy in peData)
        {
            var lineChartData = new LineChartDataset
                {
                    Label = strategy.StrategyName,
                    BorderWidth = borderWidth,
                    Data = strategy.CumulativeProfits.Select(d => (double?)d).ToList(),
                    HoverBorderWidth = hoverBorderWidth,
                    BackgroundColor = colors[colorIndex],
                    BorderColor = colors[colorIndex],
                };
            dataSets.Add(lineChartData);
            colorIndex++;
        }
        chartData = new ChartData { Datasets = dataSets, Labels = chartLabels };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Number of Transactions", Display = true };
        lineChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Cumulative P/E (USD)", Display = true };

        lineChartOptions.Plugins.Title!.Text = "Cumulative Profit/Loss over # of transactions";
        lineChartOptions.Plugins.Title.Display = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}